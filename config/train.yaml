eval_interval: 250 # keep frequent because we'll overfit
eval_iters: 25
eval_only: false
init_from: scratch
seed: 42
gradient_accumulation_steps: 1
batch_size: 128
device: cuda

data_fraction: 1.0
train_data:
  data_dir: ukb_real_data
  memmap_fname: train.bin
  tokenizer_fname: tokenizer.yaml
  prs:
    lmdb_fname: prs.lmdb
    include: ${model.prs}
    must: true
  family_hx:
    lmdb_fname: family_hx.lmdb
    map_yaml: config/family_hx/map.yaml
    include: ${model.family_hx}
    must: true
  transforms:
    - name: no-event
      args:
        interval_in_years: 5
        mode: random
val_data:
  data_dir: ukb_real_data
  memmap_fname: val.bin
  tokenizer_fname: tokenizer.yaml
  prs:
    lmdb_fname: ${train_data.prs.lmdb_fname}
    include: ${train_data.prs.include}
    must: ${train_data.prs.must}
  family_hx:
    lmdb_fname: ${train_data.family_hx.lmdb_fname}
    map_yaml: ${train_data.family_hx.map_yaml}
    include: ${train_data.family_hx.include}
    must: ${train_data.family_hx.must}
  transforms:
    - name: no-event
      args:
        interval_in_years: 5
        mode: random
model:
  block_size: 48
  vocab_size: 1271
  n_layer: 12
  n_head: 12
  n_embd: 120
  dropout: 0.1
  token_dropout: 0.0
  t_min: 0.1
  bias: true
  mask_ties: true
  ignore_tokens: [0, 2 ,3, 4, 5, 6, 7, 8, 9, 10, 11, 12] # ignore padding and lifestyle tokens
  prs: true
  prs_size: 36
  prs_projector: mlp
  family_hx: true
  family_hx_map_yaml: ${train_data.family_hx.map_yaml}
  modality_emb: true
  loss:
    ce_beta: 1.0
    dt_beta: 1.0
    zero_inflate: false
log:
  wandb_log: true
  wandb_project: delphi
  log_interval: 25
  always_ckpt_after_eval: true
  ckpt_interval: null
optim:
  learning_rate: 6e-4 # with baby networks can afford to go a bit higher
  max_iters: 100000
  weight_decay: 2e-1
  lr_decay_iters: 100000 # make equal to max_iters usually
  min_lr: 6e-5 # learning_rate / 10 usually
  beta2: 0.99 # make a bit bigger because number of tokens per iter is small
  warmup_iters: 1000 # not super necessary potentially
